{"version":3,"sources":["components/Paper/Paper.module.scss","components/Employee/Employee.module.scss","components/EmployeesList/EmployeesList.module.scss","pages/Employees/Employees.module.scss","components/EmployeesBirthday/EmployeesBirthday.module.scss","store/slices/employeesSlice.ts","assets/preloader.svg","components/Paper/index.tsx","hooks/useAppSelector.ts","services/api.ts","utils/loadState.ts","utils/getCurrentMonth.ts","utils/getBirthdate.ts","components/EmployeesBirthday/index.tsx","utils/getMonths.ts","hooks/useAppDispatch.ts","components/Employee/index.tsx","components/EmployeesList/index.tsx","pages/Employees/index.tsx","App.tsx","reportWebVitals.ts","store/index.ts","utils/saveState.ts","index.tsx"],"names":["module","exports","LoadingState","Paper","title","children","className","styles","container","content","useAppSelector","useSelector","Api","axios","get","then","data","initialState","items","activeIds","serializableState","window","localStorage","getItem","undefined","JSON","parse","error","loadState","loadingState","NEVER","fetchEmployees","createAsyncThunk","a","assets","employeesSlice","createSlice","name","reducers","addActiveEmployee","state","action","push","payload","removeActiveEmployee","index","indexOf","splice","extraReducers","builder","addCase","fulfilled","type","sort","b","firstName","localeCompare","LOADED","pending","LOADING","rejected","ERROR","actions","selectEmployees","employees","selectEmployeesLoadingState","selectActiveEmployeeIds","getCurrentMonth","date","toLocaleString","month","getBirthdate","strDate","Date","toLocaleDateString","split","day","year","months","i","setMonth","getMonth","getMonths","EmployeesBirthday","activeEmployeesId","activeEmployees","filter","emp","includes","id","lastName","length","map","isEmpty","employeesContainer","dob","useAppDispatch","useDispatch","Employee","React","memo","active","useState","isActive","setIsActive","dispatch","toggleIsActive","employeeContainer","clsx","fullname","checked","onChange","htmlFor","alphabet","EmployeesList","letter","letterContainer","Employees","useEffect","preloaderContainer","src","preloader","alt","App","path","element","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","employeesReducer","subscribe","stringify","setItem","err","console","log","saveState","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ab1d8d9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Paper_container__3Tf9M\",\"title\":\"Paper_title__Uh-ld\",\"content\":\"Paper_content__3Ig9B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeeContainer\":\"Employee_employeeContainer__3RiKT\",\"fullname\":\"Employee_fullname__1prwc\",\"active\":\"Employee_active__1mGEN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alphabet\":\"EmployeesList_alphabet__BWiZ_\",\"letterContainer\":\"EmployeesList_letterContainer__76mwD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Employees_container__3i4dm\",\"preloaderContainer\":\"Employees_preloaderContainer__1DV67\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"employeesContainer\":\"EmployeesBirthday_employeesContainer__1Q7TA\"};","import { Api } from './../../services/api';\r\nimport { RootState } from '../index';\r\nimport { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { loadState } from 'utils/loadState';\r\n\r\nexport interface IEmployee {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  dob: string;\r\n}\r\n\r\nexport enum LoadingState {\r\n  LOADED = 'LOADED',\r\n  LOADING = 'LOADING',\r\n  ERROR = 'ERROR',\r\n  NEVER = 'NEVER',\r\n}\r\n\r\ninterface EmployeesState {\r\n  items: IEmployee[];\r\n  activeIds: string[];\r\n  loadingState: LoadingState;\r\n}\r\n\r\nconst initialState: EmployeesState = {\r\n  items: [],\r\n  activeIds: loadState() ?? [],\r\n  loadingState: LoadingState.NEVER,\r\n};\r\n\r\nexport const fetchEmployees = createAsyncThunk<IEmployee[]>(\r\n  'employees/fetchEmployees',\r\n  async () => {\r\n    const assets = await Api.getEmployees();\r\n    return assets;\r\n  }\r\n);\r\n\r\nexport const employeesSlice = createSlice({\r\n  name: 'employees',\r\n  initialState,\r\n  reducers: {\r\n    addActiveEmployee: (state, action: PayloadAction<string>) => {\r\n      state.activeIds.push(action.payload);\r\n    },\r\n    removeActiveEmployee: (state, action: PayloadAction<string>) => {\r\n      const index = state.activeIds.indexOf(action.payload);\r\n      state.activeIds.splice(index, 1);\r\n    },\r\n  },\r\n  extraReducers: (builder) =>\r\n    builder\r\n      .addCase(fetchEmployees.fulfilled.type, (state, action: PayloadAction<IEmployee[]>) => {\r\n        state.items = action.payload.sort((a, b) => a.firstName.localeCompare(b.firstName));\r\n        state.loadingState = LoadingState.LOADED;\r\n      })\r\n      .addCase(fetchEmployees.pending.type, (state) => {\r\n        state.loadingState = LoadingState.LOADING;\r\n      })\r\n      .addCase(fetchEmployees.rejected.type, (state) => {\r\n        state.loadingState = LoadingState.ERROR;\r\n      }),\r\n});\r\n\r\nexport const { addActiveEmployee, removeActiveEmployee } = employeesSlice.actions;\r\n\r\nexport const selectEmployees = (state: RootState) => state.employees.items;\r\nexport const selectEmployeesLoadingState = (state: RootState) => state.employees.loadingState;\r\nexport const selectActiveEmployeeIds = (state: RootState) => state.employees.activeIds;\r\n\r\nexport default employeesSlice.reducer;\r\n","export default __webpack_public_path__ + \"static/media/preloader.3d6722b7.svg\";","import React from 'react';\r\nimport styles from './Paper.module.scss';\r\n\r\ntype PropTypes = {\r\n  title: string;\r\n};\r\n\r\nexport const Paper: React.FC<PropTypes> = ({ title, children }) => {\r\n  return (\r\n    <div className={styles.container}>\r\n      <h1 className={styles.title}>{title}</h1>\r\n      <div className={styles.content}>{children}</div>\r\n    </div>\r\n  );\r\n};\r\n","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { RootState } from 'store';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import { IEmployee } from 'store/slices/employeesSlice';\r\nimport axios from 'axios';\r\n\r\nexport const Api = {\r\n  getEmployees: (): Promise<IEmployee[]> => {\r\n    return axios\r\n      .get('https://yalantis-react-school-api.yalantis.com/api/task0/users')\r\n      .then(({ data }) => data);\r\n  },\r\n};\r\n","export const loadState = () => {\r\n  try {\r\n    const serializableState: string | null | undefined =\r\n      window.localStorage.getItem('activeEmployees');\r\n    return serializableState !== null || serializableState === undefined\r\n      ? JSON.parse(serializableState)\r\n      : undefined;\r\n  } catch (error) {\r\n    return undefined;\r\n  }\r\n};\r\n","export const getCurrentMonth = (date: Date) =>\r\n  date.toLocaleString('en', { month: 'long' });\r\n","import { getCurrentMonth } from './getCurrentMonth';\r\n\r\nexport const getBirthdate = (strDate: string): string => {\r\n  const date = new Date(strDate);\r\n  const [, day, year] = date.toLocaleDateString('en-US').split('/');\r\n  return `${day} ${getCurrentMonth(date)}, ${year} year`;\r\n};\r\n","import { Paper } from 'components/Paper';\r\nimport { useAppSelector } from 'hooks/useAppSelector';\r\nimport React from 'react';\r\nimport { selectActiveEmployeeIds, selectEmployees } from 'store/slices/employeesSlice';\r\nimport { getBirthdate } from 'utils/getBirthdate';\r\nimport { getCurrentMonth } from 'utils/getCurrentMonth';\r\nimport { getMonths } from 'utils/getMonths';\r\nimport styles from './EmployeesBirthday.module.scss';\r\n\r\nconst months = getMonths();\r\n\r\nexport const EmployeesBirthday: React.FC = () => {\r\n  const activeEmployeesId = useAppSelector(selectActiveEmployeeIds);\r\n  const activeEmployees = useAppSelector(selectEmployees)\r\n    .filter((emp) => activeEmployeesId.includes(emp.id))\r\n    .sort((a, b) => a.lastName.localeCompare(b.lastName));\r\n\r\n  return (\r\n    <Paper title=\"Employees Birthday\">\r\n      {activeEmployeesId.length ? (\r\n        months.map((month, index) => {\r\n          let isEmpty = true;\r\n          return (\r\n            <div className={styles.employeesContainer} key={index}>\r\n              <h2>{month}</h2>\r\n              <ul>\r\n                {activeEmployees\r\n                  .filter(({ dob }) => month === getCurrentMonth(new Date(dob)))\r\n                  .map(({ id, firstName, lastName, dob }) => {\r\n                    isEmpty = false;\r\n                    return <li key={id}>{`${firstName} ${lastName} - ${getBirthdate(dob)}`}</li>;\r\n                  })}\r\n                {isEmpty && <h4>No Employees</h4>}\r\n              </ul>\r\n            </div>\r\n          );\r\n        })\r\n      ) : (\r\n        <h2>Employees List is empty</h2>\r\n      )}\r\n    </Paper>\r\n  );\r\n};\r\n","import { getCurrentMonth } from './getCurrentMonth';\r\n\r\nexport const getMonths = (): string[] => {\r\n  const date = new Date();\r\n  const months = [];\r\n  for (let i = 0; i < 12; i++) {\r\n    months.push(getCurrentMonth(date));\r\n    date.setMonth(date.getMonth() + 1);\r\n  }\r\n  return months;\r\n};\r\n","import { useDispatch } from 'react-redux';\r\nimport { AppDispatch } from 'store';\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n","import clsx from 'clsx';\r\nimport { useAppDispatch } from 'hooks/useAppDispatch';\r\nimport React, { useState } from 'react';\r\nimport { addActiveEmployee, IEmployee, removeActiveEmployee } from 'store/slices/employeesSlice';\r\nimport styles from './Employee.module.scss';\r\n\r\ntype PropTypes = IEmployee & { active: boolean };\r\n\r\nexport const Employee: React.FC<PropTypes> = React.memo(\r\n  ({ id, firstName, lastName, active = false }) => {\r\n    const [isActive, setIsActive] = useState(active);\r\n    const dispatch = useAppDispatch();\r\n\r\n    const toggleIsActive = () => {\r\n      if (isActive) {\r\n        dispatch(removeActiveEmployee(id));\r\n      } else {\r\n        dispatch(addActiveEmployee(id));\r\n      }\r\n      setIsActive(!isActive);\r\n    };\r\n\r\n    return (\r\n      <div className={styles.employeeContainer}>\r\n        <span\r\n          className={clsx(styles.fullname, isActive && styles.active)}\r\n        >{`${firstName} ${lastName}`}</span>\r\n        <form>\r\n          <div>\r\n            <input\r\n              type=\"radio\"\r\n              checked={isActive === false}\r\n              onChange={toggleIsActive}\r\n              name=\"notActive\"\r\n            />\r\n            <label htmlFor=\"notActive\">Not active</label>\r\n          </div>\r\n          <div>\r\n            <input\r\n              type=\"radio\"\r\n              checked={isActive === true}\r\n              onChange={toggleIsActive}\r\n              name=\"active\"\r\n            />\r\n            <label htmlFor=\"active\">Active</label>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n","import { Employee } from 'components/Employee';\r\nimport { Paper } from 'components/Paper';\r\nimport { useAppSelector } from 'hooks/useAppSelector';\r\nimport React from 'react';\r\nimport { selectActiveEmployeeIds, selectEmployees } from 'store/slices/employeesSlice';\r\nimport styles from './EmployeesList.module.scss';\r\n\r\nconst alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');\r\n\r\nexport const EmployeesList: React.FC = () => {\r\n  const employees = useAppSelector(selectEmployees);\r\n  const activeEmployeesId = useAppSelector(selectActiveEmployeeIds);\r\n\r\n  return (\r\n    <Paper title=\"Employees\">\r\n      <div className={styles.alphabet}>\r\n        {alphabet.map((letter, index) => {\r\n          let isEmpty = true;\r\n          return (\r\n            <div className={styles.letterContainer} key={index}>\r\n              <h2>{letter}</h2>\r\n              {employees\r\n                .filter((emp) => letter === emp.firstName[0])\r\n                .map((emp) => {\r\n                  isEmpty = false;\r\n                  return (\r\n                    <Employee key={emp.id} active={activeEmployeesId.includes(emp.id)} {...emp} />\r\n                  );\r\n                })}\r\n              {isEmpty && <h4>No Employees</h4>}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\n","import preloader from 'assets/preloader.svg';\r\nimport { EmployeesBirthday } from 'components/EmployeesBirthday';\r\nimport { EmployeesList } from 'components/EmployeesList';\r\nimport { useAppDispatch } from 'hooks/useAppDispatch';\r\nimport React, { useEffect } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport {\r\n  fetchEmployees,\r\n  LoadingState,\r\n  selectEmployeesLoadingState,\r\n} from 'store/slices/employeesSlice';\r\nimport styles from './Employees.module.scss';\r\n\r\nexport const Employees: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n  useEffect(() => {\r\n    dispatch(fetchEmployees());\r\n  }, [dispatch]);\r\n\r\n  const loadingState = useSelector(selectEmployeesLoadingState);\r\n\r\n  return (\r\n    <>\r\n      {loadingState === LoadingState.LOADED ? (\r\n        <div className={styles.container}>\r\n          <EmployeesList />\r\n          <EmployeesBirthday />\r\n        </div>\r\n      ) : (\r\n        <div className={styles.preloaderContainer}>\r\n          {loadingState === LoadingState.ERROR ? (\r\n            <h1>Oops! Something went wrong.</h1>\r\n          ) : (\r\n            <img src={preloader} alt=\"preloader icon\" />\r\n          )}\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n","import { Employees } from 'pages/Employees';\nimport { Routes, Route, Navigate } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/employees\" element={<Employees />} />\n      <Route path=\"*\" element={<Navigate to=\"/employees\" />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { saveState } from 'utils/saveState';\r\nimport employeesReducer from './slices/employeesSlice';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    employees: employeesReducer,\r\n  },\r\n});\r\n\r\nstore.subscribe(() => {\r\n  saveState(store.getState().employees.activeIds);\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n","export const saveState = <T>(state: T) => {\r\n  try {\r\n    const serializableState = JSON.stringify(state);\r\n    window.localStorage.setItem('activeEmployees', serializableState);\r\n  } catch (err) {\r\n    console.log('Redux was not able to persist the state into the localstorage');\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from 'store';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}